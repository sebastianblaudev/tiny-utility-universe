// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://sutftjxaiirivuxbttow.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN1dGZ0anhhaWlyaXZ1eGJ0dG93Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA4NTI5MTYsImV4cCI6MjA1NjQyODkxNn0.a3jY1hLMtBzfYb1Z4cHnzNtE-XFcsDtlH-KDevazAlU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Types
export interface CustomerType {
  id: string;
  name: string;
  email?: string;
  phone?: string;
  address?: string;
  notes?: string;
  tenant_id?: string;
  created_at?: string;
  updated_at?: string;
}

export interface MixedPaymentType {
  method: string;
  amount: number;
}

export type PaymentMethodType = 'cash' | 'card' | 'transfer' | 'mixed';

// Helper function to get current user tenant ID
export const getCurrentUserTenantId = async (): Promise<string | null> => {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    return user?.user_metadata?.tenant_id || localStorage.getItem('current_tenant_id');
  } catch (error) {
    console.error("Error getting current user tenant ID:", error);
    return null;
  }
};

// Customer functions
export const addCustomer = async (customer: Omit<CustomerType, 'id' | 'created_at' | 'updated_at'>): Promise<CustomerType | null> => {
  try {
    const tenantId = await getCurrentUserTenantId();
    if (!tenantId) {
      console.error("No tenant ID available");
      return null;
    }

    const { data, error } = await supabase
      .from('customers')
      .insert({ ...customer, tenant_id: tenantId })
      .select()
      .single();
      
    if (error) throw error;
    return data;
  } catch (error) {
    console.error("Error adding customer:", error);
    return null;
  }
};

export const getAllCustomers = async (): Promise<CustomerType[]> => {
  try {
    const tenantId = await getCurrentUserTenantId();
    if (!tenantId) {
      console.error("No tenant ID available");
      return [];
    }

    const { data, error } = await supabase
      .from('customers')
      .select('*')
      .eq('tenant_id', tenantId)
      .order('name');
      
    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error("Error getting customers:", error);
    return [];
  }
};

export const updateCustomer = async (id: string, updates: Partial<CustomerType>): Promise<CustomerType | null> => {
  try {
    const tenantId = await getCurrentUserTenantId();
    if (!tenantId) {
      console.error("No tenant ID available");
      return null;
    }

    const { data, error } = await supabase
      .from('customers')
      .update(updates)
      .eq('id', id)
      .eq('tenant_id', tenantId)
      .select()
      .single();
      
    if (error) throw error;
    return data;
  } catch (error) {
    console.error("Error updating customer:", error);
    return null;
  }
};

export const deleteCustomer = async (id: string): Promise<boolean> => {
  try {
    const tenantId = await getCurrentUserTenantId();
    if (!tenantId) {
      console.error("No tenant ID available");
      return false;
    }

    const { error } = await supabase
      .from('customers')
      .delete()
      .eq('id', id)
      .eq('tenant_id', tenantId);
      
    if (error) throw error;
    return true;
  } catch (error) {
    console.error("Error deleting customer:", error);
    return false;
  }
};

export const getCustomerById = async (id: string): Promise<CustomerType | null> => {
  try {
    const tenantId = await getCurrentUserTenantId();
    if (!tenantId) {
      console.error("No tenant ID available");
      return null;
    }

    const { data, error } = await supabase
      .from('customers')
      .select('*')
      .eq('id', id)
      .eq('tenant_id', tenantId)
      .single();
      
    if (error) throw error;
    return data;
  } catch (error) {
    console.error("Error getting customer by ID:", error);
    return null;
  }
};

export const getCustomerSales = async (customerId: string): Promise<any[]> => {
  try {
    const tenantId = await getCurrentUserTenantId();
    if (!tenantId) {
      console.error("No tenant ID available");
      return [];
    }

    const { data, error } = await supabase
      .from('sales')
      .select('*')
      .eq('customer_id', customerId)
      .eq('tenant_id', tenantId)
      .order('date', { ascending: false });
      
    if (error) throw error;
    return data || [];
  } catch (error) {
    console.error("Error getting customer sales:", error);
    return [];
  }
};

// Sale functions
export const updateSaleWithCustomer = async (saleId: string, customerId: string): Promise<boolean> => {
  try {
    const tenantId = await getCurrentUserTenantId();
    if (!tenantId) {
      console.error("No tenant ID available");
      return false;
    }

    const { error } = await supabase
      .from('sales')
      .update({ customer_id: customerId })
      .eq('id', saleId)
      .eq('tenant_id', tenantId);
      
    if (error) throw error;
    return true;
  } catch (error) {
    console.error("Error updating sale with customer:", error);
    return false;
  }
};

export const registerCustomerSaleHistory = async (customerId: string, saleId: string): Promise<boolean> => {
  // This function can be used for additional logging if needed
  return true;
};

// Mixed payment functions
export const saveMixedPaymentMethods = async (saleId: string, paymentMethods: MixedPaymentType[]): Promise<boolean> => {
  try {
    const tenantId = await getCurrentUserTenantId();
    if (!tenantId) {
      console.error("No tenant ID available");
      return false;
    }

    const insertData = paymentMethods.map(payment => ({
      sale_id: saleId,
      payment_method: payment.method,
      amount: payment.amount,
      tenant_id: tenantId
    }));

    const { error } = await supabase
      .from('sale_payment_methods')
      .insert(insertData);
      
    if (error) throw error;
    return true;
  } catch (error) {
    console.error("Error saving mixed payment methods:", error);
    return false;
  }
};

// Menu lock functions (stub implementation)
export const getLockedMenuItems = async (): Promise<string[]> => {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    return user?.user_metadata?.locked_menu_items || [];
  } catch (error) {
    console.error("Error getting locked menu items:", error);
    return [];
  }
};

export const toggleMenuItemLock = async (itemId: string): Promise<boolean> => {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) return false;

    const currentLocked = user.user_metadata?.locked_menu_items || [];
    const isLocked = currentLocked.includes(itemId);
    
    const newLocked = isLocked 
      ? currentLocked.filter((id: string) => id !== itemId)
      : [...currentLocked, itemId];

    const { error } = await supabase.auth.updateUser({
      data: { locked_menu_items: newLocked }
    });
    
    if (error) throw error;
    return true;
  } catch (error) {
    console.error("Error toggling menu item lock:", error);
    return false;
  }
};
