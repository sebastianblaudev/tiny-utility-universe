// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://sutftjxaiirivuxbttow.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN1dGZ0anhhaWlyaXZ1eGJ0dG93Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA4NTI5MTYsImV4cCI6MjA1NjQyODkxNn0.a3jY1hLMtBzfYb1Z4cHnzNtE-XFcsDtlH-KDevazAlU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Helper function to get current user tenant ID
export const getCurrentUserTenantId = async (): Promise<string | null> => {
  const { data: { session } } = await supabase.auth.getSession();
  return session?.user?.user_metadata?.tenant_id || null;
};

// Customer type definition
export interface CustomerType {
  id: string;
  name: string;
  email?: string;
  phone?: string;
  address?: string;
  notes?: string;
  tenant_id?: string;
  created_at?: string;
  updated_at?: string;
}

// Payment method types
export interface MixedPaymentType {
  method: string;
  amount: number;
}

export type PaymentMethodType = string;

// Customer operations
export const addCustomer = async (customer: Omit<CustomerType, 'id' | 'created_at' | 'updated_at'>) => {
  const { data, error } = await supabase
    .from('customers')
    .insert(customer)
    .select()
    .single();
  
  if (error) throw error;
  return data;
};

export const getAllCustomers = async (tenantId: string) => {
  const { data, error } = await supabase
    .from('customers')
    .select('*')
    .eq('tenant_id', tenantId)
    .order('name');
  
  if (error) throw error;
  return data;
};

export const updateCustomer = async (id: string, updates: Partial<CustomerType>) => {
  const { data, error } = await supabase
    .from('customers')
    .update(updates)
    .eq('id', id)
    .select()
    .single();
  
  if (error) throw error;
  return data;
};

export const deleteCustomer = async (id: string) => {
  const { error } = await supabase
    .from('customers')
    .delete()
    .eq('id', id);
  
  if (error) throw error;
};

export const getCustomerById = async (id: string) => {
  const { data, error } = await supabase
    .from('customers')
    .select('*')
    .eq('id', id)
    .single();
  
  if (error) throw error;
  return data;
};

export const getCustomerSales = async (customerId: string, tenantId: string) => {
  const { data, error } = await supabase
    .from('sales')
    .select(`
      *,
      sale_items (
        *,
        products (name)
      )
    `)
    .eq('customer_id', customerId)
    .eq('tenant_id', tenantId)
    .order('date', { ascending: false });
  
  if (error) throw error;
  return data;
};

// Sale operations
export const updateSaleWithCustomer = async (saleId: string, customerId: string) => {
  const { data, error } = await supabase
    .from('sales')
    .update({ customer_id: customerId })
    .eq('id', saleId)
    .select()
    .single();
  
  if (error) throw error;
  return data;
};

export const registerCustomerSaleHistory = async (customerId: string, saleId: string) => {
  // This is handled automatically by the database relationship
  return true;
};

export const saveMixedPaymentMethods = async (saleId: string, paymentMethods: MixedPaymentType[]) => {
  const { data, error } = await supabase
    .from('sale_payment_methods')
    .insert(
      paymentMethods.map(pm => ({
        sale_id: saleId,
        payment_method: pm.method,
        amount: pm.amount
      }))
    );
  
  if (error) throw error;
  return data;
};

// Menu/sidebar operations
export const getLockedMenuItems = async () => {
  // Return empty array for now - implement as needed
  return [];
};

export const toggleMenuItemLock = async (itemId: string) => {
  // Implement as needed
  return true;
};