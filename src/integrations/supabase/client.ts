
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://sutftjxaiirivuxbttow.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InN1dGZ0anhhaWlyaXZ1eGJ0dG93Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA4NTI5MTYsImV4cCI6MjA1NjQyODkxNn0.a3jY1hLMtBzfYb1Z4cHnzNtE-XFcsDtlH-KDevazAlU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Type definitions
export type CustomerType = {
  id: string;
  name: string;
  email?: string;
  phone?: string;
  address?: string;
  notes?: string;
  tenant_id?: string;
  created_at?: string;
  updated_at?: string;
};

export type PaymentMethodType = 'cash' | 'card' | 'transfer';

export type MixedPaymentType = {
  method: PaymentMethodType;
  amount: number;
};

// Customer functions
export const addCustomer = async (customer: Omit<CustomerType, 'id'>) => {
  const { data, error } = await supabase
    .from('customers')
    .insert(customer)
    .select()
    .single();
  
  if (error) throw error;
  return data;
};

export const getAllCustomers = async (tenantId: string) => {
  const { data, error } = await supabase
    .from('customers')
    .select('*')
    .eq('tenant_id', tenantId);
  
  if (error) throw error;
  return data;
};

export const updateCustomer = async (id: string, customer: Partial<CustomerType>) => {
  const { data, error } = await supabase
    .from('customers')
    .update(customer)
    .eq('id', id)
    .select()
    .single();
  
  if (error) throw error;
  return data;
};

export const deleteCustomer = async (id: string) => {
  const { error } = await supabase
    .from('customers')
    .delete()
    .eq('id', id);
  
  if (error) throw error;
};

export const getCustomerById = async (id: string) => {
  const { data, error } = await supabase
    .from('customers')
    .select('*')
    .eq('id', id)
    .single();
  
  if (error) throw error;
  return data;
};

export const getCustomerSales = async (customerId: string) => {
  const { data, error } = await supabase
    .from('sales')
    .select('*')
    .eq('customer_id', customerId)
    .order('date', { ascending: false });
  
  if (error) throw error;
  return data;
};

// Sale functions
export const updateSaleWithCustomer = async (saleId: string, customerId: string) => {
  const { data, error } = await supabase
    .from('sales')
    .update({ customer_id: customerId })
    .eq('id', saleId)
    .select()
    .single();
  
  if (error) throw error;
  return data;
};

export const registerCustomerSaleHistory = async (customerId: string, saleId: string) => {
  // This function can be used for additional customer history tracking if needed
  return { customerId, saleId };
};

// Payment functions
export const saveMixedPaymentMethods = async (saleId: string, paymentMethods: MixedPaymentType[]): Promise<boolean> => {
  try {
    const tenantId = await getCurrentUserTenantId();
    
    if (!tenantId) {
      console.error('No tenant ID available');
      return false;
    }

    // Insert payment methods into sale_payment_methods table
    const paymentMethodsData = paymentMethods.map(method => ({
      sale_id: saleId,
      payment_method: method.method,
      amount: method.amount,
      tenant_id: tenantId
    }));

    const { error } = await supabase
      .from('sale_payment_methods')
      .insert(paymentMethodsData);

    if (error) {
      console.error('Error saving mixed payment methods:', error);
      return false;
    }

    return true;
  } catch (error) {
    console.error('Error in saveMixedPaymentMethods:', error);
    return false;
  }
};

// Utility functions
export const getCurrentUserTenantId = async (): Promise<string | null> => {
  try {
    const { data: { user } } = await supabase.auth.getUser();
    return user?.user_metadata?.tenant_id || localStorage.getItem('current_tenant_id');
  } catch (error) {
    console.error("Error getting current user tenant ID:", error);
    return null;
  }
};

// Menu functions
export const toggleMenuItemLock = async (itemName: string, isLocked: boolean) => {
  // This would typically interact with a menu_locks table
  // For now, return a placeholder
  return { itemName, isLocked };
};

export const getLockedMenuItems = async (): Promise<string[]> => {
  // This would typically fetch from a menu_locks table
  // For now, return empty array
  return [];
};
